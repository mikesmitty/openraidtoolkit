#!/usr/bin/env python

import argparse

# Argument parsing base section
parser = argparse.ArgumentParser(description='RAID controller management interface.')
parser.add_argument('-d', action='store', help='Use specified ort driver', dest='driver_name')
parser.add_argument('-t', action='store', help='Optional RAID cli tool path', dest='tool_path')
parser.add_argument('-c', action='store', default=0, help='Controller ID number', dest='controller_id', type=int)
parser.add_argument('-b', action='store', default=0, help='Battery ID number', dest='battery_id', type=int)

# Subparsers section starts here
subparsers = parser.add_subparsers(help='commands', dest='module')

# Battery options
battery_parser = subparsers.add_parser('battery', help='Manage controller battery')
battery_parser.add_argument('option1', nargs='?', choices=['status','test'])
battery_parser.add_argument('option2', nargs='?', default=None)

# Controller options
controller_parser = subparsers.add_parser('controller', help='Manage RAID controller')
controller_parser.add_argument('option1', nargs='?', choices=['status','list'])

# Disk options
disk_parser = subparsers.add_parser('disk', help='Manage physical disks')
disk_parser.add_argument('option1', nargs='?', choices=['status'])
#disk_parser.add_argument('option2', nargs='?', choices=['status'])

#parsed_args = parser.parse_known_args()
parsed_args = parser.parse_args()

print parsed_args 

# Define RAID driver modules
# 3ware tw_cli
class tw:
    def __init__(self, controller='0', tool='tw_cli'):
        self.controller = self.select_controller(controller)
        self.tool = tool

    def select_controller(self, controller):
        if controller >= 0:
            return '/c' + str(controller)
        else:
            return '/c0'

    def list_controller(self, args):
        import subprocess
        command = self.tool + ' show'
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()
        print output

    def get_battery(self, args, battery_id='0'):
        import subprocess
        if args.option1 == 'status' and args.option2 != None:
            command = self.tool + ' ' + self.controller + '/bbu show ' + args.option2
        elif args.option1 == 'test':
            command = self.tool + ' ' + self.controller + '/bbu test'
            interactive_warning(command)
        elif args.option1 == 'status':
            command = self.tool + ' ' + self.controller + '/bbu show all'
        else:
            command = self.tool + ' ' + self.controller + '/bbu show'
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()
        print output

    def get_disk(self, args, disk_id):
        import subprocess
        command = self.tool + ' ' + self.controller + '/bbu show'
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()
        print output

# Dell OpenManage omcliproxy
class om:
    def __init__(self, controller='0', tool='omcliproxy'):
        self.controller = self.select_controller(controller)
        self.tool = tool

    def select_controller(self, controller):
        if controller >= 0:
            return str(controller)
        else:
            return '0'

    def list_controller(self, args):
        import subprocess
        command = self.tool + ' omreport storage battery battery=' + battery_id + ' controller=' + self.controller
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()
        print output

    def get_battery(self, args, battery_id='0'):
        import subprocess
        command = self.tool + ' omreport storage battery battery=' + battery_id + ' controller=' + self.controller
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()
        print output

    def get_disk(self, args, disk_id):
        import re
        # disk_id format is either 0:0 or 0:0:0
        disk_id_regex = re.compile('^[0-9]+:[0-9]+(:[0-9]+)?$')
        disk_id_match = disk_id_regex.match(disk_id) 

        import subprocess
        if disk_id == 'all':
            command = self.tool + ' omreport storage pdisk controller=' + self.controller
        elif disk_id_match:
            command = self.tool + ' omreport storage pdisk controller=' + self.controller + ' pdisk=' + disk_id
        else:
            command = self.tool + ' omreport storage pdisk controller=' + self.controller
        output = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE).stdout.read()
        print output

def interactive_warning(command):
    exit("\nInteractive commands not supported at this time. Run the following command:\n\n" + command + '\n')

# Define our operative module functions
def battery_module(args, card):
    card.get_battery(args, str(args.battery_id))

def controller_module(args, card):
    card.get_disk(args, str(args.controller_id))

def disk_module(args, card):
    print 'Disk module'
    #print card.get_disk(str(args.battery_id))

# This function will most likely only serve as a placeholder for now. Future methods will 
# include finding the card model for compatibility, and possible inclusion of vendor binaries
def find_tools(name=None):
    supported_tools = {
        'om':'omcliproxy',
        'tw':'tw_cli'
    }

    from distutils.spawn import find_executable
    avail_tools = []

    if name == None:
        for tool, command in supported_tools.iteritems():
            if find_executable(command):
                avail_tools.append(tool)
    else:
        if find_executable(supported_tools[name]):
            avail_tools.append(name)
        else:
            exit("Unable to find tool associated with " + name + " driver in $PATH")
    return avail_tools

# If we don't have a specified driver, find available cli tools
if parsed_args.driver_name == None:
    # Check for raid cli tools we recognize in the $PATH
    avail_drivers = find_tools()
    if len(avail_drivers) == 1:
        # Receive the name of our driver from avail_drivers and grab its reference
        driver = avail_drivers[0]
        driver_class_name = globals()[driver]
    else:
        print "\nMore than one tool found in $PATH. Select one manually\n"
# Try to use the specified cli tool
else:
    avail_drivers = find_tools(parsed_args.driver_name)
    driver = avail_drivers[0]
    driver_class_name = globals()[driver]

# Instantiate our driver class with controller_id and tool_path if provided
if parsed_args.tool_path == None:
    raid_card_object = driver_class_name(parsed_args.controller_id)
else:
    raid_card_object = driver_class_name(parsed_args.controller_id, parsed_args.tool_path)

if parsed_args.module == 'battery':
    battery_module(parsed_args, raid_card_object)
elif parsed_args.module == 'controller':
    controller_module(parsed_args, raid_card_object)
elif parsed_args.module == 'disk':
    disk_module(parsed_args, raid_card_object)
